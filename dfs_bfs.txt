#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Recursive DFS for undirected graph
void dfs(int node, vector<bool>& visited, const vector<vector<int>>& graph) {
    visited[node] = true;
    cout << node << " ";
    
    for (int neighbor : graph[node]) {
        if (!visited[neighbor]) {
            dfs(neighbor, visited, graph);
        }
    }
}

// BFS for undirected graph
void bfs(int start, const vector<vector<int>>& graph) {
    vector<bool> visited(graph.size(), false);
    queue<int> q;
    
    q.push(start);
    visited[start] = true;
    
    cout << "BFS: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";
        
        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}

int main() {
    int nodes, edges;
    cout << "Enter number of nodes and edges: ";
    cin >> nodes >> edges;
    
    vector<vector<int>> graph(nodes);
    
    cout << "Enter edges (u v):\n";
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // Undirected connection
    }
    
    int start;
    cout << "Enter starting node: ";
    cin >> start;
    
    // Recursive DFS
    vector<bool> visited(nodes, false);
    cout << "DFS (Recursive): ";
    dfs(start, visited, graph);
    cout << endl;
    
    // BFS
    bfs(start, graph);
    
    return 0;
}
